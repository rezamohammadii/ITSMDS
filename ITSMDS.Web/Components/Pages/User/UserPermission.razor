@page "/user/permission"

@using System.ComponentModel.DataAnnotations
@using ITSMDS.Domain.DTOs
@using ITSMDS.Web.ApiClient
@using ITSMDS.Web.Services
@inject UserApiClient userApi
@inject RoleApiClient roleApi
@using ITSMDS.Web.ViewModel
@using ITSMDS.Web.Components.Pages.User.Component
@inject ISweetAlertService SweetAlert


<PageTitle>مدیریت دسترسی ها</PageTitle>

<h3 class="mb-4 text-gradient">مدیریت دسترسی </h3>


<Tabs EnableFadeEffect="true" Style="margin-bottom: 20px">
    <Tab Title="مدیریت دسترسی" Active="true" >
        <Content>

            <div class="row">
                <div class="col-md-12">
                    <div class="card h-100 d-flex flex-column shadow-lg mx-auto">
                        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">دسترسی‌های موجود</h5>
                            <span class="badge badge-light">@ExistingPermissions.Count دسترسی</span>
                        </div>
                        <div class="card-body">
                            @if (ExistingPermissions == null)
                            {
                                <p>در حال بارگذاری...</p>
                            }
                            else if (!ExistingPermissions.Any())
                            {
                                <p>هیچ دسترسیی تعریف نشده است.</p>
                            }
                            else
                            {
                                @foreach (var category in ExistingPermissions.GroupBy(p => p.Name))
                                {
                                    <div class="permission-category mb-4">
                                        @* <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h6 class="text-secondary mb-0">@GetCategoryName(category.Key)</h6>
                                            <span class="badge badge-primary">@category.Count() مورد</span>
                                        </div> *@

                                        @foreach (var permission in category)
                                        {
                                            <div class="card mb-3">
                                                <div class="card-body">
                                                    <h6 class="card-title text-dark">@GetCategoryName(category.Key)</h6>
                                                    <p class="card-text text-muted small mb-2">@permission.Description</p>

                                                    <div class="mt-3 pt-2 border-top">
                                                        <span class="text-muted small">قابلیت ها:</span>
                                                        <div class="capabilities ">
                                                            @foreach (var item in permission.Abilites)
                                                            {
                                                                @if (item == "read")
                                                                {
                                                                    <Badge Class="m-2" Color="BadgeColor.Primary">خواندن</Badge>
                                                                }
                                                                @if (item == "edit")
                                                                {
                                                                    <Badge Class="m-2" Color="BadgeColor.Secondary">ویرایش</Badge>
                                                                }
                                                                @if (item == "create")
                                                                {
                                                                    <Badge Class="m-2" Color="BadgeColor.Success" >ایجاد</Badge>
                                                                }
                                                                @if (item == "delete")
                                                                {
                                                                    <Badge Class="m-2" Color="BadgeColor.Danger" >حذف</Badge>
                                                                }
                                                            }

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab Title="تخصیص نقش به کاربر">
        <Content>
            <div class="col-md-12 mt-4">
                <div class="card shadow-lg mx-auto">
                    <div class="card-header bg-primary text-white" style="background-image: linear-gradient(270deg, rgb(5, 39, 103) 0%, #3a0647 70%);">
                        <h5 class="mb-0">تخصیص نقش به کاربر</h5>
                    </div>
                    <div class="card-body">
                        <!-- بخش فیلدهای ورودی -->
                        <div class="d-flex flex-row align-items-end gap-3 flex-wrap mb-4">
                            <div class="flex-grow-1">
                                <div class="form-group mb-0">
                                    <label for="user-select">انتخاب نام کاربر</label>
                                    <SearchableSelect TItem="UserViewModel"
                                                      Items="Users"
                                                      @bind-Value="assignmentModel.SelectedUser"
                                                      TextField="@(u => u.UserName + " - " + u.PersonalCodeString)"
                                                      ValueField="@(u => u.PersonalCodeString)"
                                                      Placeholder="جستجو و انتخاب کاربر...">
                                    </SearchableSelect>
                                </div>
                            </div>
                            <div class="flex-grow-1">
                                <div class="form-group mb-0">
                                    <label for="role-select">انتخاب نقش</label>
                                    <SearchableSelect TItem="RoleDto"
                                                      Items="RoleList"
                                                      @bind-Value="assignmentModel.SelectedRole"
                                                      TextField="@(u => u.RoleName)"
                                                      ValueField="@(u => u.RoleId)"
                                                      Placeholder="جستجو و انتخاب کاربر...">
                                    </SearchableSelect>
                                </div>
                            </div>
                            <div class="flex-shrink-0" style="min-width: 120px;">
                                <div class="form-group mb-0">
                                    <label class="d-block invisible">دکمه</label>
                                    <button class="btn btn-success w-100" @onclick="async () => await AssignRoleAsync(SpinnerColor.Success, SpinnerType.Dots)" disabled="@(!IsFormValid)">
                                        تخصیص نقش
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- بخش نمایش کاربران - جدا از فیلدهای ورودی -->
                        <div class="users-section">
                            @if (FilteredUsers.Any())
                            {
                                <div class="row">
                                    @foreach (var user in FilteredUsers)
                                    {
                                        <div class="col-md-6 col-lg-4 mb-4">
                                            <div class="card h-100 user-card">
                                                <div class="card-body">
                                                    <div class="user-info mb-3">
                                                        <div class="d-flex align-items-center mb-2">
                                                            <i class="fas fa-id-card text-muted me-2"></i>
                                                            <small>شماره پرسنلی: @user.PersonalCode</small>
                                                        </div>
                                                        <div class="d-flex align-items-center">
                                                            <i class="fas fa-envelope text-muted me-2"></i>
                                                            <small>@user.Email</small>
                                                        </div>
                                                    </div>

                                                    <div class="user-roles">
                                                        <h6 class="text-muted mb-2">نقش‌ها:</h6>
                                                        <div class="d-flex flex-wrap gap-2">
                                                            @foreach (var roleAccess in user.RoleName)
                                                            {
                                                                <div class="role-badge-container position-relative">
                                                                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary"
                                                                            Size="ButtonSize.ExtraSmall" @onclick="() => ShowDeleteConfirm(user.HashId)"
                                                                            Style="padding: 0px;font-size:12px;padding-right:10px">
                                                                        @roleAccess <Badge Class="m-2" Color="BadgeColor.Danger">
                                                                            <Icon Name="IconName.X" />
                                                                        </Badge>
                                                                    </Button>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info text-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    کاربری یافت نشد.
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @if (ShowDeleteModal)
            {
                <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5)">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">تایید حذف</h5>
                                <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                            </div>
                            <div class="modal-body">
                                <p>آیا از حذف این نقش اطمینان دارید؟ این عمل قابل بازگشت نیست.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">انصراف</button>
                                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">حذف نقش</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </Content>
    </Tab>
</Tabs>

@code {
    @inject IJSRuntime JSRuntime
    private string SearchTerm { get; set; } = "";
    private string UserToDelete { get; set; } = "";
    private bool ShowDeleteModal { get; set; } = false;
    private AssignmentModel assignmentModel = new AssignmentModel();
    private List<RoleDto> RoleList = new();
    private List<UserViewModel> Users = new();
    private string SelectedUserId { get; set; } = "";
    private int SelectedRoleId { get; set; }
    private bool IsFormValid => assignmentModel.SelectedUser != null && assignmentModel.SelectedRole != null;
    private List<PermissionDto> ExistingPermissions = new List<PermissionDto>();
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    public class AssignmentModel
    {
        public UserViewModel SelectedUser { get; set; }
        public RoleDto SelectedRole { get; set; }
    }


    private List<UserViewModel> FilteredUsers =>
        Users.Where(u =>
            u.Email.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.PersonalCodeString.Contains(SearchTerm) ||
            u.Email.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.UserName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
            u.IpAddress.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) 
        ).ToList();

    private void ShowDeleteConfirm(string userId)
    {
        UserToDelete = userId;
        ShowDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        ShowDeleteModal = false;
        UserToDelete = "";
    }

    private void ConfirmDelete()
    {
        if (!string.IsNullOrEmpty(UserToDelete))
        {
            var user = Users.FirstOrDefault(u => u.HashId == UserToDelete);
            if (user != null)
            {
                Users.Remove(user);
            }
        }
        CloseDeleteModal();
    }

  
    protected override async Task OnInitializedAsync()
    {

        var res = await userApi.GetPermissionListAsync();
        ExistingPermissions = res.Data;
        var resultDto = await roleApi.RoleListAsync();
        RoleList = resultDto.Data.Items;
        var outPut = await userApi.GetUserListAsync();
        Users = outPut.Data.ToList();

    }

    private string GetCategoryName(string categoryKey)
    {
        return categoryKey switch
        {
            "user" => "مدیریت کاربران",
            "role" => "مدیریت نقش‌ها",
            "server" => "مدیریت سرورها",
            "service" => "مدیریت سرویس‌ها",
            "permission" => "مدیریت دسترسی ها",
            _ => categoryKey
        };
    }

   
    private async Task AssignRoleAsync(SpinnerColor spinnerColor,  SpinnerType spinnerType = default)
    {
        if (IsFormValid)
        {
            var pCode = assignmentModel.SelectedUser?.PersonalCodeString;
            var roleId = assignmentModel.SelectedRole?.RoleId;

            if (!string.IsNullOrEmpty(pCode) && roleId.HasValue)
            {
                try
                {
                    PreloadService.Show(spinnerColor);
                    await roleApi.AssignRoleAsync(pCode, roleId.Value);
                    

                    await SweetAlert.ShowSuccessAsync("نقش با موفقیت تخصیص داده شد");

                    assignmentModel = new AssignmentModel();
                    StateHasChanged();
                    await OnInitializedAsync();
                }
                catch (Exception ex)
                {
                    await SweetAlert.ShowErrorAsync($"خطا در تخصیص نقش: {ex.Message}");

                }
                finally
                {
                    PreloadService.Hide();
                }
            }
        }
        else
        {
            await SweetAlert.ShowWarningAsync("لطفاً کاربر و نقش را انتخاب کنید");

        }
    }
}

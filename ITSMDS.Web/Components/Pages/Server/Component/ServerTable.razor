@* 
<Table Class="table table-hover align-middle">
    <thead>
        <tr>
            <th>نام سرور</th>
            <th>تعداد سرویس</th>
            <th>مشخصات</th>
            <th>هزینه</th>
            <th>وضعیت</th>
            <th>عملیات</th>
        </tr> 
    </thead>
    <tbody>
        @foreach (var server in Servers)
        {
            <tr>
                <td>@server.ServerName</td>
                <td>@server.ServicesCount</td>
                <td>@server.Specifications</td>
                <td>@server.Cost</td>
                <td>
                    <Badge Color="@(server.Status == "فعال" ? BadgeColor.Success : BadgeColor.Warning)" Class="badge-sm">
                        <Icon Name="IconName.CircleFill" Class="me-1" Size="IconSize.x2"></Icon>
                        @server.Status
                    </Badge>
                </td>
                <td>
                    <Button Color="ButtonColor.Light" Size="ButtonSize.Small" @onclick="() => OnEdit.InvokeAsync(server.Id)">
                        <Icon Name="IconName.Gear"></Icon>
                    </Button>
                    <Button Color="ButtonColor.Light" Size="ButtonSize.Small" @onclick="() => OnDelete.InvokeAsync(server.Id)">
                        <Icon Name="IconName.Trash"></Icon>
                    </Button>
                </td>
            </tr>
        }
    </tbody>
</Table>

@code {
    [Parameter] public IEnumerable<ServerViewModel> Servers { get; set; } = Enumerable.Empty<ServerViewModel>();
    [Parameter] public EventCallback<long> OnEdit { get; set; }
    [Parameter] public EventCallback<long> OnDelete { get; set; }
} *@







<Grid TItem="Product"
      Class="table table-hover border-top"
      Data="products"
      AllowDetailView="true"
      AllowSorting="true">

    <GridColumns>
        <GridColumn TItem="Product" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
            @context.Id
        </GridColumn>
        <GridColumn TItem="Product" HeaderText="Employee Name" PropertyName="Name" SortKeySelector="item => item.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="Product" HeaderText="Active" PropertyName="IsActive" SortKeySelector="item => item.IsActive">
            @context.IsActive
        </GridColumn>
    </GridColumns>

    <GridDetailView TItem="Product">

        <Grid TItem="Ingredient"
              Class="table table-hover border-top"
              Data="GetIngredients(context.Id)">

            <GridColumns>
                <GridColumn TItem="Ingredient" Context="emp1" HeaderText="Id" PropertyName="Id">
                    @emp1.Id
                </GridColumn>
                <GridColumn TItem="Ingredient" Context="emp1" HeaderText="Description" PropertyName="Description">
                    @emp1.Description
                </GridColumn>
                <GridColumn TItem="Ingredient" Context="emp1" HeaderText="Unit" PropertyName="Unit">
                    @emp1.Unit
                </GridColumn>
                <GridColumn TItem="Ingredient" Context="emp1" HeaderText="Quantity" PropertyName="Quantity">
                    @emp1.Quantity
                </GridColumn>
            </GridColumns>

        </Grid>

    </GridDetailView>

</Grid>

@code {
    private List<Product> products = new List<Product> {
        new Product { Id = 10, Name = "Product 10", IsActive = true },
        new Product { Id = 20, Name = "Product 20", IsActive = true },
        new Product { Id = 30, Name = "Product 30", IsActive = true },
        new Product { Id = 40, Name = "Product 40", IsActive = true },
        new Product { Id = 50, Name = "Product 50", IsActive = true }
    };

    private List<Ingredient> ingredients = new List<Ingredient> {
       new Ingredient { Id = 10105, ProductId = 10, Description = "Ingredient 1", Unit = "UNIT1", Quantity = 350 },
       new Ingredient { Id = 10106, ProductId = 10, Description = "Ingredient 2", Unit = "UNIT1", Quantity = 600 },
       new Ingredient { Id = 10107, ProductId = 10, Description = "Ingredient 3", Unit = "UNIT2", Quantity = 13 },
       new Ingredient { Id = 10108, ProductId = 10, Description = "Ingredient 4", Unit = "UNIT3", Quantity = 25 },
       new Ingredient { Id = 20109, ProductId = 20, Description = "Ingredient 5", Unit = "UNIT1", Quantity = 750 },
       new Ingredient { Id = 20110, ProductId = 20, Description = "Ingredient 3", Unit = "UNIT2", Quantity = 13 },
       new Ingredient { Id = 10111, ProductId = 10, Description = "Ingredient 4", Unit = "UNIT3", Quantity = 25 },
       new Ingredient { Id = 20112, ProductId = 20, Description = "Ingredient 5", Unit = "UNIT1", Quantity = 750 },
       new Ingredient { Id = 40113, ProductId = 40, Description = "Ingredient 3", Unit = "UNIT2", Quantity = 13 },
       new Ingredient { Id = 50114, ProductId = 50, Description = "Ingredient 4", Unit = "UNIT3", Quantity = 25 },
       new Ingredient { Id = 20115, ProductId = 20, Description = "Ingredient 5", Unit = "UNIT1", Quantity = 750 },
    };

    private IEnumerable<Ingredient> GetIngredients(int productId) => ingredients.Where(i => i.ProductId == productId);

    public record class Product
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public bool IsActive { get; set; }
    }

    public record class Ingredient
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public string? Description { get; set; }
        public string? Unit { get; set; }
        public int Quantity { get; set; }
    }
}
@page "/login"
@using ITSMDS.Domain.DTOs
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthApiClient authService
@layout ITSMDS.Web.Components.Layout.LoginLayout
@inject ISweetAlertService SweetAlert

<div class="login-card">
    <h3 class="text-center mb-4 fw-bold">ورود به سیستم</h3>

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <InputSelect id="user-select" class="form-control" @bind-Value="SelectLoginField">

                <option value="">نوع ورود خود را انتخاب کنید</option>
                <option value="PersonalCode">کد پرسنلی</option>
                <option value="UserName">نام کاربری</option>
                
            </InputSelect>
        </div>
        <div class="mb-3">
            <InputText @bind-Value="loginModel.Username" class="form-control form-control-lg rounded-3" placeholder="نام کاربری" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="mb-3">
            <InputText @bind-Value="loginModel.Password" type="password" class="form-control form-control-lg rounded-3" placeholder="رمز عبور" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary w-100 py-2 rounded-3" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
                <span>در حال ورود...</span>
            }
            else
            {
                <span>ورود</span>
            }
        </button>
    </EditForm>
</div>

@inject IJSRuntime js

@code {
    private LoginDTO loginModel = new();
    private string errorMessage = string.Empty;
    private string SelectLoginField = string.Empty;
    private bool isLoading = false;
    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrEmpty(SelectLoginField) || SelectLoginField == "")
            {
                await SweetAlert.ShowErrorAsync("لطفا یکی از روش های ورود را انتخاب کنید");

            }
            else
            {
                if (SelectLoginField == "PersonalCode")
                {
                    loginModel.PersonalCode = int.Parse(loginModel.Username);
                    loginModel.Username = null;
                }
                var result = await authService.LoginAsync(loginModel);

                if (result.Success)
                {

                    await SweetAlert.ShowSuccessAsync(result.Message);
                    await Task.Delay(500);
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    await SweetAlert.ShowErrorAsync(result.Message);
                }
            }

        }
        catch (Exception ex)
        {
            await SweetAlert.ShowErrorAsync("خطا در ارتباط با سرور");

            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
